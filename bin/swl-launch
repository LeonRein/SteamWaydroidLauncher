#!/bin/bash

# Prevent running as root
if [ "$(id -u)" -eq 0 ]; then
    echo "ERROR: Do not run this script as root. Please run as a regular user."
    exit 1
fi

if [ -z "$SWL_LOGGING_SETUP" ]; then
    source /usr/lib/swl/setup-logging.sh
    export SWL_LOGGING_SETUP=1
fi

export RESOLUTION=$(xdpyinfo | awk '/dimensions/{print $2}')
if [ -z "$RESOLUTION" ]; then
    echo "Failed to detect screen resolution. Exiting."
    exit 1
fi

trap /usr/bin/swl-shutdown-waydroid EXIT

# Detect if running inside Wayland and if cage is already running
if [ -n "$WAYLAND_DISPLAY" ] && pgrep -x cage > /dev/null; then
    USE_CAGE=0
else
    USE_CAGE=1
fi

# Check if non Steam shortcut has the game / app as the launch option
if [ -z "$1" ]
then
    echo "[$(date)] Launching Waydroid with full UI..."
    if [ "$USE_CAGE" -eq 1 ]; then
        cage -- bash -c 'wlr-randr --output X11-1 --custom-mode $RESOLUTION ; \
            /usr/bin/swl-startup-waydroid ; \
            /usr/bin/waydroid show-full-ui &'
    else
        bash -c '/usr/bin/swl-startup-waydroid ; \
            /usr/bin/waydroid show-full-ui &'
    fi
else
    echo "[$(date)] Launching Waydroid app: $1 ..."
    if [ "$USE_CAGE" -eq 1 ]; then
        cage -- env PACKAGE="$1" bash -c 'wlr-randr --output X11-1 --custom-mode $RESOLUTION ; \
            /usr/bin/swl-startup-waydroid ; \
            sleep 1 ; \
            echo "[$(date)] Launching Waydroid app: $PACKAGE ..." ; \
            /usr/bin/waydroid app launch $PACKAGE & \
            sleep 1 ; \
            echo "[$(date)] Launching Waydroid full UI..." ; \
            /usr/bin/waydroid show-full-ui &'
    else
        env PACKAGE="$1" bash -c '/usr/bin/swl-startup-waydroid ; \
            sleep 1 ; \
            echo "[$(date)] Launching Waydroid app: $PACKAGE ..." ; \
            /usr/bin/waydroid app launch $PACKAGE & \
            sleep 1 ; \
            echo "[$(date)] Launching Waydroid full UI..." ; \
            /usr/bin/waydroid show-full-ui &'
    fi
fi

# run shutdown scripts to cleanup when waydroid exits
while [ -n "$(pgrep cage)" ]
do
    sleep 1
done